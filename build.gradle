import java.util.jar.JarFile

plugins {
	id 'fabric-loom' version '0.2.6-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
	maven { url "https://jitpack.io" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	modImplementation "com.github.ZeroMemes:Alpine:1.9"
	include "com.github.ZeroMemes:Alpine:1.9"
	include "net.jodah:typetools:0.5.0"

	modImplementation "com.github.Vatuu:discord-rpc:1.6.2"
	include "com.github.Vatuu:discord-rpc:1.6.2"

	modImplementation "com.gitlab.CDAGaming:fabritone:fabritone~1.14.x-Fabric-SNAPSHOT"
	include "com.gitlab.CDAGaming:fabritone:fabritone~1.14.x-Fabric-SNAPSHOT"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task generatePacketUtils() {
	doLast {
		// Get minecraft jar file
		def mc = ""
		def dir = new File(System.getProperty("user.home") + "/.gradle/caches/fabric-loom")
		for (def file in dir.listFiles()) {
			if (file.name.contains("minecraft") && file.name.contains("mapped") && file.name.endsWith((String) project.yarn_mappings + "-v2.jar")) {
				mc = file.absolutePath
				break
			}
		}

		// Get packets
		def s2cPackets = []
		def c2sPackets = []

		def file = new JarFile(mc)
		for (entry in file.entries()) {
			if (entry.name.endsWith("S2CPacket.class")) s2cPackets << entry.name.substring(0, entry.name.length() - 6)
			else if (entry.name.endsWith("C2SPacket.class")) c2sPackets << entry.name.substring(0, entry.name.length() - 6)
		}

		// Generate PacketUtils.java
		def writer = new File("src/main/java/minegame159/meteorclient/utils/PacketUtils.java").newWriter()
		writer << "package minegame159.meteorclient.utils;\n\n"

		//   Write imports
		writer << "import net.minecraft.network.Packet;\n"
		writer << "import java.util.Map;\n"
		writer << "import java.util.HashMap;\n"
		writer << "import java.util.Set;\n"

		//   Write class
		writer << "\npublic class PacketUtils {\n"

		//     Write fields
		writer << "    private static final Map<Class<? extends Packet<?>>, String> S2C_PACKETS = new HashMap<>();\n"
		writer << "    private static final Map<Class<? extends Packet<?>>, String> C2S_PACKETS = new HashMap<>();\n\n"
		writer << "    private static final Map<String, Class<? extends Packet<?>>> S2C_PACKETS_R = new HashMap<>();\n"
		writer << "    private static final Map<String, Class<? extends Packet<?>>> C2S_PACKETS_R = new HashMap<>();\n\n"

		//     Write static block
		writer << "    static {\n"
		s2cPackets.each { def packet = (String) it; def name = packet.substring(packet.lastIndexOf("/") + 1); writer << "        S2C_PACKETS.put(${packet.replace("/", ".")}.class, \"$name\");\n" }
		writer << "\n"
		c2sPackets.each { def packet = (String) it; def name = packet.substring(packet.lastIndexOf("/") + 1); writer << "        C2S_PACKETS.put(${packet.replace("/", ".")}.class, \"$name\");\n" }
		writer << "\n\n"
		s2cPackets.each { def packet = (String) it; def name = packet.substring(packet.lastIndexOf("/") + 1); writer << "        S2C_PACKETS_R.put(\"$name\", ${packet.replace("/", ".")}.class);\n" }
		writer << "\n"
		c2sPackets.each { def packet = (String) it; def name = packet.substring(packet.lastIndexOf("/") + 1); writer << "        C2S_PACKETS_R.put(\"$name\", ${packet.replace("/", ".")}.class);\n" }
		writer << "    }\n\n"

		//     Write getName method
		writer << "    public static String getName(Class<? extends Packet<?>> packetClass) {\n"
		writer << "        String name = S2C_PACKETS.get(packetClass);\n"
		writer << "        if (name != null) return name;\n"
		writer << "        return C2S_PACKETS.get(packetClass);\n"
		writer << "    }\n\n"

		//     Write getPacket method
		writer << "    public static Class<? extends Packet<?>> getPacket(String name) {\n"
		writer << "        Class<? extends Packet<?>> packet = S2C_PACKETS_R.get(name);\n"
		writer << "        if (packet != null) return packet;\n"
		writer << "        return C2S_PACKETS_R.get(name);\n"
		writer << "    }\n\n"

		//     Write getS2CPackets method
		writer << "    public static Set<Class<? extends Packet<?>>> getS2CPackets() {\n"
		writer << "        return S2C_PACKETS.keySet();\n"
		writer << "    }\n\n"

		//     Write getC2SPackets method
		writer << "    public static Set<Class<? extends Packet<?>>> getC2SPackets() {\n"
		writer << "        return C2S_PACKETS.keySet();\n"
		writer << "    }\n"

		//   Write end class
		writer << "}\n"

		writer.close()
	}
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
