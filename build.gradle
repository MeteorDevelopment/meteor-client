plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version + (System.getenv("CIRCLE_BUILD_NUM") != null ? ("-" + System.getenv("CIRCLE_BUILD_NUM")) : "")
group = project.maven_group

minecraft {
	accessWidener "src/main/resources/meteor-client.accesswidener"
}

repositories {
	maven {
		name = "jitpack"
		url = "https://jitpack.io"
	}
	jcenter()
}

dependencies {
	def dependency = { id ->
		implementation id
		shadow id
	}

	// Minecraft
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API Indigo Renderer (only used in mixins)
	modImplementation fabricApi.module("fabric-renderer-indigo", project.api_version)

	// For XRay compatibility
	modImplementation "com.github.CaffeineMC:sodium-fabric:${project.sodium_version}"

	// Baritone (the fork is standalone baritone and the only change is a setting to build it as fabric mod instead of forge one)
	modImplementation("com.github.MeteorDevelopment:baritone:${project.baritone_version}") {
		exclude(group: "org.lwjgl.lwjgl", module: "lwjgl-platform")
		exclude(group: "org.lwjgl.lwjgl", module: "lwjgl")
		exclude(group: "net.java.jinput", module: "jinput-platform")
		exclude(group: "net.java.jinput", module: "jinput")
		exclude(group: "net.sf.jopt-simple", module: "jopt-simple")
		exclude(group: "org.ow2.asm", module: "asm-debug-all")
	}
	include "com.github.MeteorDevelopment:baritone:${project.baritone_version}"

	// Other dependencies
	dependency "com.github.MeteorDevelopment:orbit:${project.orbit_version}"
	dependency "com.g00fy2:versioncompare:${project.versioncompare_version}"
	dependency "com.github.minndevelopment:java-discordrpc:${project.discordrpc_version}"
}

shadowJar {
	configurations = [ project.configurations.shadow ]
}

processResources {
	inputs.property "version", project.version

    duplicatesStrategy = DuplicatesStrategy.WARN

    from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version

		filter { line -> line.replace("@devbuild@", System.getenv("CIRCLE_BUILD_NUM") != null ? System.getenv("CIRCLE_BUILD_NUM") : "") }
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	from "LICENSE"

	manifest {
		attributes("Main-Class": "minegame159.meteorclient.Main")
	}
}

remapJar {
	dependsOn shadowJar
	input.set(shadowJar.archiveFile)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }
}

apply from: "scripts/packetutils.gradle"
